/* eslint-disable */
{{>head}}
{{#usePropTypes}}
import PropTypes from 'prop-types';
import ImmutablePropTypes from 'react-immutable-proptypes';
{{/usePropTypes}}
import { Record, List{{#useTypeScript}}{{#importImmutableMap}}, Map{{/importImmutableMap}}{{/useTypeScript}} } from 'immutable';
import { schema as _schema, denormalize as _denormalize } from 'normalizr';
import isArray from 'lodash/isArray';
{{#importList}}
import {{#useTypeScript}}{{name}}, {{/useTypeScript}}{ schema as {{schemaName}}{{#usePropTypes}}, propTypes as {{name}}PropType{{/usePropTypes}} } from '../{{&filePath}}';
{{/importList}}

{{#props}}
{{#enumObjects}}
export const {{name}} = {{#isValueString}}'{{value}}'{{/isValueString}}{{^isValueString}}{{value}}{{/isValueString}};
{{/enumObjects}}
{{/props}}

{{#useTypeScript}}
{{#props}}{{#enumObjects}}
export type {{literalTypeName}} = {{#isValueString}}'{{value}}'{{/isValueString}}{{^isValueString}}{{value}}{{/isValueString}};
{{/enumObjects}}
{{/props}}

export interface {{name}}Props {
{{#props}}
  {{&name}}: {{&getTypeScriptTypes}}{{#nullable}} | null{{/nullable}} | undefined;
{{/props}}
};

{{/useTypeScript}}
const defaultValues{{#useTypeScript}}: {{name}}Props{{/useTypeScript}} = {
{{#props}}
  {{&name}}: {{&getDefaults}},
{{/props}}
};

{{#usePropTypes}}
export const propTypesObject = {
{{#props}}
  {{&name}}: {{&getPropTypes}}{{#required}}{{^nullable}}.isRequired{{/nullable}}{{/required}},
{{/props}}
};
export const propTypes = PropTypes.shape(propTypesObject);

{{/usePropTypes}}
export const schema = new _schema.Entity('{{name}}'{{#idAttribute}}, {}, { idAttribute: {{&idAttribute}} }{{/idAttribute}});
{{>oneOf}}
{{>dependency}}

{{#useTypeScript}}
export type IdsBase = number | string | number[] | string[] | List<number> | List<string>;

type DenormalizeFilterResult<Model, Ids extends IdsBase> = Ids extends unknown[]
  ? Model[]
  : Ids extends List<unknown>
    ? List<Model>
    : Model | undefined;

{{/useTypeScript}}
/**
 * @params ids : {{name}}'s id[s]
 * @params entities : all entities that need to denormalize ids
 */
export const denormalize = {{#useTypeScript}}<Model, Ids extends IdsBase>{{/useTypeScript}}(
  ids{{#useTypeScript}}: Ids{{/useTypeScript}},
  entities{{#useTypeScript}}: any{{/useTypeScript}}
) => {
  const result = _denormalize(ids, isArray(ids) || List.isList(ids) ? [schema] : schema, entities);
  const filteredResult{{#useTypeScript}}: DenormalizeFilterResult<Model, Ids>{{/useTypeScript}} = isArray(result)
    ? result.filter((m) => m !== undefined)
    : List.isList(result)
      ? result.filter((m{{#useTypeScript}}: unknown{{/useTypeScript}}) => m !== undefined)
      : result;
  return filteredResult;
};

export default class {{name}} extends Record(defaultValues) {
{{#useTypeScript}}
{{#props}}
{{^isAliasBase}}
  {{&name}}: {{&getTypeScriptTypes}}{{#nullable}} | null{{/nullable}} | undefined;
{{/isAliasBase}}
{{/props}}

{{/useTypeScript}}
  static denormalize{{#useTypeScript}}<Ids extends IdsBase>{{/useTypeScript}}(
    id{{#useTypeScript}}: Ids{{/useTypeScript}},
    entities{{#useTypeScript}}: any{{/useTypeScript}}
  ) {
    return denormalize{{#useTypeScript}}<{{name}}, Ids>{{/useTypeScript}}(id, entities);
  }
{{#props}}
{{#alias}}

  // created by 'x-attribute-as'
  get {{&alias}}() {
    return this.get('{{&alias}}', this.{{name}});
  }
{{/alias}}
{{/props}}
}

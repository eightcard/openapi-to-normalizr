{{#useTypeScript}}// @ts-nocheck
{{/useTypeScript}}/* eslint-disable */
{{>head}}
import isFunction from 'lodash/isFunction';
import { createAction{{#useTypeScript}}, ActionFunctionAny, ActionMeta{{/useTypeScript}} } from 'redux-actions';
import schemas from '{{&schemasFile}}';{{#useTypeScript}}

import type { Schema } from 'normalizr';{{/useTypeScript}}

{{#operationIdList}}
export const {{.}} = '{{.}}';
{{/operationIdList}}

{{#useTypeScript}}
export type ActionType ={{#operationIdList}}
  | '{{.}}'{{/operationIdList}};

interface Meta {
  openApi: boolean,
  id: string,
  schema: Schema,
}

{{/useTypeScript}}
export function createOpenApiAction(
  id{{#useTypeScript}}: ActionType{{/useTypeScript}},
  payloadCreator{{#useTypeScript}}: ActionFunctionAny<any>{{/useTypeScript}} = (params) => params,
  metaCreator{{#useTypeScript}}: ActionFunctionAny<Meta>{{/useTypeScript}}
){{#useTypeScript}}: ActionFunctionAny<ActionMeta<any, Meta>>{{/useTypeScript}} {
  const meta = { openApi: true, id: id.toLowerCase(), schema: schemas[id.toLowerCase()] };
  const _metaCreator =
    isFunction(metaCreator)
      ? (...args{{#useTypeScript}}: Array<any>{{/useTypeScript}}) => Object.assign(metaCreator(...args), meta)
      : () => meta;
  return createAction(id, payloadCreator, _metaCreator);
}

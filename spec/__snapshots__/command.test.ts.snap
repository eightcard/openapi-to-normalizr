// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`schema generator spec from json schema ref 1`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import isFunction from 'lodash/isFunction';
import { createAction } from 'redux-actions';
import schemas from '../schemas/sample_schema';

export const GET_PETS__ID_ = 'GET_PETS__ID_';

export function createOpenApiAction(
  id,
  payloadCreator = (params) => params,
  metaCreator
) {
  const meta = { openApi: true, id: id.toLowerCase(), schema: schemas[id.toLowerCase()] };
  const _metaCreator =
    isFunction(metaCreator)
      ? (...args) => Object.assign(metaCreator(...args), meta)
      : () => meta;
  return createAction(id, payloadCreator, _metaCreator);
}
",
  "path": "tmp/action_types/sample.js",
}
`;

exports[`schema generator spec from json schema ref 2`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import { Record, List } from 'immutable';
import { schema as _schema, denormalize as _denormalize } from 'normalizr';
import isArray from 'lodash/isArray';

export const GENDER_MALE = 'male';
export const GENDER_FEMALE = 'female';
export const GENDER_OTHER = 'other';

const defaultValues = {
  name: undefined,
  nickname: undefined,
  address: undefined,
  gender: undefined,
};

export const schema = new _schema.Entity('Owner', {}, { idAttribute: 'name' });

/**
 * @params ids : Owner's id[s]
 * @params entities : all entities that need to denormalize ids
 */
const denormalize = (
  ids,
  entities
) => {
  const result = _denormalize(ids, isArray(ids) || List.isList(ids) ? [schema] : schema, entities);
  const filteredResult = isArray(result)
    ? result.filter((m) => m !== undefined)
    : List.isList(result)
      ? result.filter((m) => m !== undefined)
      : result;
  return filteredResult;
};

export default class Owner extends Record(defaultValues) {
  static denormalize(
    id,
    entities
  ) {
    return denormalize(id, entities);
  }
}
",
  "path": "tmp/base/owner.js",
}
`;

exports[`schema generator spec from json schema ref 3`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import { Record, List } from 'immutable';
import { schema as _schema, denormalize as _denormalize } from 'normalizr';
import isArray from 'lodash/isArray';
import { schema as OwnerSchema } from '../owner';

export const KIND_DOG = 'Dog';
export const KIND_CAT = 'Cat';

const defaultValues = {
  id: undefined,
  name: undefined,
  kind: undefined,
  owner: undefined,
};

export const schema = new _schema.Entity('WrappedPet', {}, { idAttribute: 'id' });
schema.define({
  owner: OwnerSchema
});

/**
 * @params ids : WrappedPet's id[s]
 * @params entities : all entities that need to denormalize ids
 */
const denormalize = (
  ids,
  entities
) => {
  const result = _denormalize(ids, isArray(ids) || List.isList(ids) ? [schema] : schema, entities);
  const filteredResult = isArray(result)
    ? result.filter((m) => m !== undefined)
    : List.isList(result)
      ? result.filter((m) => m !== undefined)
      : result;
  return filteredResult;
};

export default class WrappedPet extends Record(defaultValues) {
  static denormalize(
    id,
    entities
  ) {
    return denormalize(id, entities);
  }
}
",
  "path": "tmp/base/wrapped_pet.js",
}
`;

exports[`schema generator spec from json schema ref 4`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import WrappedPet from './wrapped_pet';
import Owner from './owner';

export {
  WrappedPet,
  Owner,
};
",
  "path": "tmp/index.js",
}
`;

exports[`schema generator spec from json schema ref 5`] = `
{
  "output": "/* eslint-disable comma-dangle */
/**
 * generated from API definition file
 */

import _Owner from './base/owner';
export * from './base/owner';

export default class Owner extends _Owner {
  /**
   * write custom methods here
   */
}
",
  "path": "tmp/owner.js",
}
`;

exports[`schema generator spec from json schema ref 6`] = `
{
  "output": "/* eslint-disable quotes,comma-dangle */
/**
 * generated from API definition file
 */

export default {
  "openapi": "3.0.0",
  "tags": [
    {
      "name": "default"
    },
    {
      "name": "pet"
    }
  ],
  "paths": {
    "/pets/{id}": {
      "get": {
        "tags": [
          "pet"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PetResponse"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "PetResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/WrappedPet"
            }
          }
        }
      }
    },
    "schemas": {
      "WrappedPet": {
        "type": "object",
        "required": [
          "id",
          "name",
          "kind",
          "owner"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Pet/properties/id"
          },
          "name": {
            "type": "string"
          },
          "kind": {
            "$ref": "#/components/schemas/Pet/properties/kind"
          },
          "owner": {
            "$ref": "#/components/schemas/Owner"
          }
        }
      },
      "Pet": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "kind": {
            "type": "string",
            "enum": [
              "Dog",
              "Cat"
            ]
          }
        }
      },
      "Owner": {
        "type": "object",
        "required": [
          "nickname",
          "address"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "nickname": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string"
          },
          "gender": {
            "type": "string",
            "enum": [
              "male",
              "female",
              "other"
            ]
          }
        }
      }
    }
  }
};
",
  "path": "tmp/sample_api.js",
}
`;

exports[`schema generator spec from json schema ref 7`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import { schema as WrappedPetSchema } from './../wrapped_pet';



const schemas = {
  get_pets__id_: {
    200: WrappedPetSchema
  }
};

export default schemas;
",
  "path": "tmp/schemas/sample_schema.js",
}
`;

exports[`schema generator spec from json schema ref 8`] = `
{
  "output": "/* eslint-disable comma-dangle */
/**
 * generated from API definition file
 */

import _WrappedPet from './base/wrapped_pet';
export * from './base/wrapped_pet';

export default class WrappedPet extends _WrappedPet {
  /**
   * write custom methods here
   */
}
",
  "path": "tmp/wrapped_pet.js",
}
`;

exports[`schema generator spec from json schema ref TS 1`] = `
{
  "output": "// @ts-nocheck
/* eslint-disable */
/**
 * generated from API definition file
 */

import isFunction from 'lodash/isFunction';
import { createAction, ActionFunctionAny, ActionMeta } from 'redux-actions';
import schemas from '../schemas/sample_schema';

import type { Schema } from 'normalizr';

export const GET_PETS__ID_ = 'GET_PETS__ID_';

export type ActionType =
  | 'GET_PETS__ID_';

interface Meta {
  openApi: boolean,
  id: string,
  schema: Schema,
}

export function createOpenApiAction(
  id: ActionType,
  payloadCreator?: ActionFunctionAny<any> = (params) => params,
  metaCreator?: ActionFunctionAny<Meta>
): ActionFunctionAny<ActionMeta<any, Meta>> {
  const meta = { openApi: true, id: id.toLowerCase(), schema: schemas[id.toLowerCase()] };
  const _metaCreator =
    isFunction(metaCreator)
      ? (...args: Array<any>) => Object.assign(metaCreator(...args), meta)
      : () => meta;
  return createAction(id, payloadCreator, _metaCreator);
}
",
  "path": "tmp/action_types/sample.ts",
}
`;

exports[`schema generator spec from json schema ref TS 2`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import { Record, List } from 'immutable';
import { schema as _schema, denormalize as _denormalize } from 'normalizr';
import isArray from 'lodash/isArray';

export const GENDER_MALE = 'male';
export const GENDER_FEMALE = 'female';
export const GENDER_OTHER = 'other';

export type GenderMale = 'male';
export type GenderFemale = 'female';
export type GenderOther = 'other';

export interface OwnerProps {
  name: string | undefined;
  nickname: string | null | undefined;
  address: string | undefined;
  gender: GenderMale | GenderFemale | GenderOther | undefined;
};

const defaultValues: OwnerProps = {
  name: undefined,
  nickname: undefined,
  address: undefined,
  gender: undefined,
};

export const schema = new _schema.Entity('Owner', {}, { idAttribute: 'name' });

type IdsBase = number | string | number[] | string[] | List<number> | List<string>;

type DenormalizeFilterResult<Model, Ids extends IdsBase> = Ids extends unknown[]
  ? Model[]
  : Ids extends List<unknown>
    ? List<Model>
    : Model | undefined;

/**
 * @params ids : Owner's id[s]
 * @params entities : all entities that need to denormalize ids
 */
const denormalize = <Model, Ids extends IdsBase>(
  ids: Ids,
  entities: any
) => {
  const result = _denormalize(ids, isArray(ids) || List.isList(ids) ? [schema] : schema, entities);
  const filteredResult: DenormalizeFilterResult<Model, Ids> = isArray(result)
    ? result.filter((m) => m !== undefined)
    : List.isList(result)
      ? result.filter((m: unknown) => m !== undefined)
      : result;
  return filteredResult;
};

export default class Owner extends Record(defaultValues) {
  name: string | undefined;
  nickname: string | null | undefined;
  address: string | undefined;
  gender: GenderMale | GenderFemale | GenderOther | undefined;

  static denormalize<Ids extends IdsBase>(
    id: Ids,
    entities: any
  ) {
    return denormalize<Owner, Ids>(id, entities);
  }
}
",
  "path": "tmp/base/owner.ts",
}
`;

exports[`schema generator spec from json schema ref TS 3`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import { Record, List } from 'immutable';
import { schema as _schema, denormalize as _denormalize } from 'normalizr';
import isArray from 'lodash/isArray';
import Owner, { schema as OwnerSchema } from '../owner';

export const KIND_DOG = 'Dog';
export const KIND_CAT = 'Cat';

export type KindDog = 'Dog';
export type KindCat = 'Cat';

export interface WrappedPetProps {
  id: number | undefined;
  name: string | undefined;
  kind: KindDog | KindCat | undefined;
  owner: Owner | undefined;
};

const defaultValues: WrappedPetProps = {
  id: undefined,
  name: undefined,
  kind: undefined,
  owner: undefined,
};

export const schema = new _schema.Entity('WrappedPet', {}, { idAttribute: 'id' });
schema.define({
  owner: OwnerSchema
});

type IdsBase = number | string | number[] | string[] | List<number> | List<string>;

type DenormalizeFilterResult<Model, Ids extends IdsBase> = Ids extends unknown[]
  ? Model[]
  : Ids extends List<unknown>
    ? List<Model>
    : Model | undefined;

/**
 * @params ids : WrappedPet's id[s]
 * @params entities : all entities that need to denormalize ids
 */
const denormalize = <Model, Ids extends IdsBase>(
  ids: Ids,
  entities: any
) => {
  const result = _denormalize(ids, isArray(ids) || List.isList(ids) ? [schema] : schema, entities);
  const filteredResult: DenormalizeFilterResult<Model, Ids> = isArray(result)
    ? result.filter((m) => m !== undefined)
    : List.isList(result)
      ? result.filter((m: unknown) => m !== undefined)
      : result;
  return filteredResult;
};

export default class WrappedPet extends Record(defaultValues) {
  id: number | undefined;
  name: string | undefined;
  kind: KindDog | KindCat | undefined;
  owner: Owner | undefined;

  static denormalize<Ids extends IdsBase>(
    id: Ids,
    entities: any
  ) {
    return denormalize<WrappedPet, Ids>(id, entities);
  }
}
",
  "path": "tmp/base/wrapped_pet.ts",
}
`;

exports[`schema generator spec from json schema ref TS 4`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import WrappedPet from './wrapped_pet';
import Owner from './owner';

export {
  WrappedPet,
  Owner,
};
",
  "path": "tmp/index.ts",
}
`;

exports[`schema generator spec from json schema ref TS 5`] = `
{
  "output": "/* eslint-disable comma-dangle */
/**
 * generated from API definition file
 */

import _Owner from './base/owner';
export * from './base/owner';

export default class Owner extends _Owner {
  /**
   * write custom methods here
   */
}
",
  "path": "tmp/owner.ts",
}
`;

exports[`schema generator spec from json schema ref TS 6`] = `
{
  "output": "/* eslint-disable quotes,comma-dangle */
/**
 * generated from API definition file
 */

export default {
  "openapi": "3.0.0",
  "tags": [
    {
      "name": "default"
    },
    {
      "name": "pet"
    }
  ],
  "paths": {
    "/pets/{id}": {
      "get": {
        "tags": [
          "pet"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PetResponse"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "PetResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/WrappedPet"
            }
          }
        }
      }
    },
    "schemas": {
      "WrappedPet": {
        "type": "object",
        "required": [
          "id",
          "name",
          "kind",
          "owner"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Pet/properties/id"
          },
          "name": {
            "type": "string"
          },
          "kind": {
            "$ref": "#/components/schemas/Pet/properties/kind"
          },
          "owner": {
            "$ref": "#/components/schemas/Owner"
          }
        }
      },
      "Pet": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "kind": {
            "type": "string",
            "enum": [
              "Dog",
              "Cat"
            ]
          }
        }
      },
      "Owner": {
        "type": "object",
        "required": [
          "nickname",
          "address"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "nickname": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string"
          },
          "gender": {
            "type": "string",
            "enum": [
              "male",
              "female",
              "other"
            ]
          }
        }
      }
    }
  }
};
",
  "path": "tmp/sample_api.ts",
}
`;

exports[`schema generator spec from json schema ref TS 7`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import { schema as WrappedPetSchema } from './../wrapped_pet';



const schemas = {
  get_pets__id_: {
    200: WrappedPetSchema
  }
} as const;

export default schemas;
",
  "path": "tmp/schemas/sample_schema.ts",
}
`;

exports[`schema generator spec from json schema ref TS 8`] = `
{
  "output": "/* eslint-disable comma-dangle */
/**
 * generated from API definition file
 */

import _WrappedPet from './base/wrapped_pet';
export * from './base/wrapped_pet';

export default class WrappedPet extends _WrappedPet {
  /**
   * write custom methods here
   */
}
",
  "path": "tmp/wrapped_pet.ts",
}
`;

exports[`schema generator spec from one of check 1`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import isFunction from 'lodash/isFunction';
import { createAction } from 'redux-actions';
import schemas from '../schemas/sample_schema';

export const GET_OWNER__NAME_ = 'GET_OWNER__NAME_';

export function createOpenApiAction(
  id,
  payloadCreator = (params) => params,
  metaCreator
) {
  const meta = { openApi: true, id: id.toLowerCase(), schema: schemas[id.toLowerCase()] };
  const _metaCreator =
    isFunction(metaCreator)
      ? (...args) => Object.assign(metaCreator(...args), meta)
      : () => meta;
  return createAction(id, payloadCreator, _metaCreator);
}
",
  "path": "tmp/action_types/sample.js",
}
`;

exports[`schema generator spec from one of check 2`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import { Record, List } from 'immutable';
import { schema as _schema, denormalize as _denormalize } from 'normalizr';
import isArray from 'lodash/isArray';

export const KIND_CAT = 'cat';

const defaultValues = {
  id: undefined,
  kind: undefined,
  name: undefined,
};

export const schema = new _schema.Entity('Cat', {}, { idAttribute: 'id' });

/**
 * @params ids : Cat's id[s]
 * @params entities : all entities that need to denormalize ids
 */
const denormalize = (
  ids,
  entities
) => {
  const result = _denormalize(ids, isArray(ids) || List.isList(ids) ? [schema] : schema, entities);
  const filteredResult = isArray(result)
    ? result.filter((m) => m !== undefined)
    : List.isList(result)
      ? result.filter((m) => m !== undefined)
      : result;
  return filteredResult;
};

export default class Cat extends Record(defaultValues) {
  static denormalize(
    id,
    entities
  ) {
    return denormalize(id, entities);
  }
}
",
  "path": "tmp/base/cat.js",
}
`;

exports[`schema generator spec from one of check 3`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import { Record, List } from 'immutable';
import { schema as _schema, denormalize as _denormalize } from 'normalizr';
import isArray from 'lodash/isArray';

export const KIND_DOG = 'dog';

const defaultValues = {
  id: undefined,
  kind: undefined,
  name: undefined,
};

export const schema = new _schema.Entity('Dog', {}, { idAttribute: 'id' });

/**
 * @params ids : Dog's id[s]
 * @params entities : all entities that need to denormalize ids
 */
const denormalize = (
  ids,
  entities
) => {
  const result = _denormalize(ids, isArray(ids) || List.isList(ids) ? [schema] : schema, entities);
  const filteredResult = isArray(result)
    ? result.filter((m) => m !== undefined)
    : List.isList(result)
      ? result.filter((m) => m !== undefined)
      : result;
  return filteredResult;
};

export default class Dog extends Record(defaultValues) {
  static denormalize(
    id,
    entities
  ) {
    return denormalize(id, entities);
  }
}
",
  "path": "tmp/base/dog.js",
}
`;

exports[`schema generator spec from one of check 4`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import { Record, List } from 'immutable';
import { schema as _schema, denormalize as _denormalize } from 'normalizr';
import isArray from 'lodash/isArray';
import { schema as DogSchema } from '../dog';
import { schema as CatSchema } from '../cat';


const defaultValues = {
  name: undefined,
  title: undefined,
  fallback_title: undefined,
  pet: undefined,
};

export const schema = new _schema.Entity('Owner', {}, { idAttribute: 'name' });
const oneOfSchema1 = new _schema.Union({
  dog: DogSchema,
  cat: CatSchema
}, 'kind');
schema.define({
  pet: oneOfSchema1
});

/**
 * @params ids : Owner's id[s]
 * @params entities : all entities that need to denormalize ids
 */
const denormalize = (
  ids,
  entities
) => {
  const result = _denormalize(ids, isArray(ids) || List.isList(ids) ? [schema] : schema, entities);
  const filteredResult = isArray(result)
    ? result.filter((m) => m !== undefined)
    : List.isList(result)
      ? result.filter((m) => m !== undefined)
      : result;
  return filteredResult;
};

export default class Owner extends Record(defaultValues) {
  static denormalize(
    id,
    entities
  ) {
    return denormalize(id, entities);
  }

  // created by 'x-attribute-as'
  get title() {
    return this.get('title', this.fallback_title);
  }
}
",
  "path": "tmp/base/owner.js",
}
`;

exports[`schema generator spec from one of check 5`] = `
{
  "output": "/* eslint-disable comma-dangle */
/**
 * generated from API definition file
 */

import _Cat from './base/cat';
export * from './base/cat';

export default class Cat extends _Cat {
  /**
   * write custom methods here
   */
}
",
  "path": "tmp/cat.js",
}
`;

exports[`schema generator spec from one of check 6`] = `
{
  "output": "/* eslint-disable comma-dangle */
/**
 * generated from API definition file
 */

import _Dog from './base/dog';
export * from './base/dog';

export default class Dog extends _Dog {
  /**
   * write custom methods here
   */
}
",
  "path": "tmp/dog.js",
}
`;

exports[`schema generator spec from one of check 7`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import Owner from './owner';
import Dog from './dog';
import Cat from './cat';

export {
  Owner,
  Dog,
  Cat,
};
",
  "path": "tmp/index.js",
}
`;

exports[`schema generator spec from one of check 8`] = `
{
  "output": "/* eslint-disable comma-dangle */
/**
 * generated from API definition file
 */

import _Owner from './base/owner';
export * from './base/owner';

export default class Owner extends _Owner {
  /**
   * write custom methods here
   */
}
",
  "path": "tmp/owner.js",
}
`;

exports[`schema generator spec from one of check 9`] = `
{
  "output": "/* eslint-disable quotes,comma-dangle */
/**
 * generated from API definition file
 */

export default {
  "openapi": "3.0.0",
  "tags": [
    {
      "name": "default"
    }
  ],
  "paths": {
    "/owner/{name}": {
      "get": {
        "tags": [
          "owner"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OwnerResponse"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "OwnerResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Owner"
            }
          }
        }
      }
    },
    "schemas": {
      "Owner": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "fallback_title": {
            "type": "string"
          },
          "pet": {
            "$ref": "#/components/schemas/Pet"
          }
        }
      },
      "Pet": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Dog"
          },
          {
            "$ref": "#/components/schemas/Cat"
          }
        ],
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "dog": "#/components/schemas/Dog",
            "cat": "#/components/schemas/Cat"
          }
        }
      },
      "Dog": {
        "type": "object",
        "required": [
          "id",
          "kind"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "kind": {
            "type": "string",
            "enum": [
              "dog"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Cat": {
        "type": "object",
        "required": [
          "id",
          "kind"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "kind": {
            "type": "string",
            "enum": [
              "cat"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      }
    }
  }
};
",
  "path": "tmp/sample_api.js",
}
`;

exports[`schema generator spec from one of check 10`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import { schema as OwnerSchema } from './../owner';



const schemas = {
  get_owner__name_: {
    200: OwnerSchema
  }
};

export default schemas;
",
  "path": "tmp/schemas/sample_schema.js",
}
`;

exports[`schema generator spec from one of check TS 1`] = `
{
  "output": "// @ts-nocheck
/* eslint-disable */
/**
 * generated from API definition file
 */

import isFunction from 'lodash/isFunction';
import { createAction, ActionFunctionAny, ActionMeta } from 'redux-actions';
import schemas from '../schemas/sample_schema';

import type { Schema } from 'normalizr';

export const GET_OWNER__NAME_ = 'GET_OWNER__NAME_';

export type ActionType =
  | 'GET_OWNER__NAME_';

interface Meta {
  openApi: boolean,
  id: string,
  schema: Schema,
}

export function createOpenApiAction(
  id: ActionType,
  payloadCreator?: ActionFunctionAny<any> = (params) => params,
  metaCreator?: ActionFunctionAny<Meta>
): ActionFunctionAny<ActionMeta<any, Meta>> {
  const meta = { openApi: true, id: id.toLowerCase(), schema: schemas[id.toLowerCase()] };
  const _metaCreator =
    isFunction(metaCreator)
      ? (...args: Array<any>) => Object.assign(metaCreator(...args), meta)
      : () => meta;
  return createAction(id, payloadCreator, _metaCreator);
}
",
  "path": "tmp/action_types/sample.ts",
}
`;

exports[`schema generator spec from one of check TS 2`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import { Record, List } from 'immutable';
import { schema as _schema, denormalize as _denormalize } from 'normalizr';
import isArray from 'lodash/isArray';

export const KIND_CAT = 'cat';

export type KindCat = 'cat';

export interface CatProps {
  id: number | undefined;
  kind: KindCat | undefined;
  name: string | undefined;
};

const defaultValues: CatProps = {
  id: undefined,
  kind: undefined,
  name: undefined,
};

export const schema = new _schema.Entity('Cat', {}, { idAttribute: 'id' });

type IdsBase = number | string | number[] | string[] | List<number> | List<string>;

type DenormalizeFilterResult<Model, Ids extends IdsBase> = Ids extends unknown[]
  ? Model[]
  : Ids extends List<unknown>
    ? List<Model>
    : Model | undefined;

/**
 * @params ids : Cat's id[s]
 * @params entities : all entities that need to denormalize ids
 */
const denormalize = <Model, Ids extends IdsBase>(
  ids: Ids,
  entities: any
) => {
  const result = _denormalize(ids, isArray(ids) || List.isList(ids) ? [schema] : schema, entities);
  const filteredResult: DenormalizeFilterResult<Model, Ids> = isArray(result)
    ? result.filter((m) => m !== undefined)
    : List.isList(result)
      ? result.filter((m: unknown) => m !== undefined)
      : result;
  return filteredResult;
};

export default class Cat extends Record(defaultValues) {
  id: number | undefined;
  kind: KindCat | undefined;
  name: string | undefined;

  static denormalize<Ids extends IdsBase>(
    id: Ids,
    entities: any
  ) {
    return denormalize<Cat, Ids>(id, entities);
  }
}
",
  "path": "tmp/base/cat.ts",
}
`;

exports[`schema generator spec from one of check TS 3`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import { Record, List } from 'immutable';
import { schema as _schema, denormalize as _denormalize } from 'normalizr';
import isArray from 'lodash/isArray';

export const KIND_DOG = 'dog';

export type KindDog = 'dog';

export interface DogProps {
  id: number | undefined;
  kind: KindDog | undefined;
  name: string | undefined;
};

const defaultValues: DogProps = {
  id: undefined,
  kind: undefined,
  name: undefined,
};

export const schema = new _schema.Entity('Dog', {}, { idAttribute: 'id' });

type IdsBase = number | string | number[] | string[] | List<number> | List<string>;

type DenormalizeFilterResult<Model, Ids extends IdsBase> = Ids extends unknown[]
  ? Model[]
  : Ids extends List<unknown>
    ? List<Model>
    : Model | undefined;

/**
 * @params ids : Dog's id[s]
 * @params entities : all entities that need to denormalize ids
 */
const denormalize = <Model, Ids extends IdsBase>(
  ids: Ids,
  entities: any
) => {
  const result = _denormalize(ids, isArray(ids) || List.isList(ids) ? [schema] : schema, entities);
  const filteredResult: DenormalizeFilterResult<Model, Ids> = isArray(result)
    ? result.filter((m) => m !== undefined)
    : List.isList(result)
      ? result.filter((m: unknown) => m !== undefined)
      : result;
  return filteredResult;
};

export default class Dog extends Record(defaultValues) {
  id: number | undefined;
  kind: KindDog | undefined;
  name: string | undefined;

  static denormalize<Ids extends IdsBase>(
    id: Ids,
    entities: any
  ) {
    return denormalize<Dog, Ids>(id, entities);
  }
}
",
  "path": "tmp/base/dog.ts",
}
`;

exports[`schema generator spec from one of check TS 4`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import { Record, List } from 'immutable';
import { schema as _schema, denormalize as _denormalize } from 'normalizr';
import isArray from 'lodash/isArray';
import Dog, { schema as DogSchema } from '../dog';
import Cat, { schema as CatSchema } from '../cat';



export interface OwnerProps {
  name: string | undefined;
  title: string | undefined;
  fallback_title: string | undefined;
  pet: Dog | Cat | undefined;
};

const defaultValues: OwnerProps = {
  name: undefined,
  title: undefined,
  fallback_title: undefined,
  pet: undefined,
};

export const schema = new _schema.Entity('Owner', {}, { idAttribute: 'name' });
const oneOfSchema1 = new _schema.Union({
  dog: DogSchema,
  cat: CatSchema
}, 'kind');
schema.define({
  pet: oneOfSchema1
});

type IdsBase = number | string | number[] | string[] | List<number> | List<string>;

type DenormalizeFilterResult<Model, Ids extends IdsBase> = Ids extends unknown[]
  ? Model[]
  : Ids extends List<unknown>
    ? List<Model>
    : Model | undefined;

/**
 * @params ids : Owner's id[s]
 * @params entities : all entities that need to denormalize ids
 */
const denormalize = <Model, Ids extends IdsBase>(
  ids: Ids,
  entities: any
) => {
  const result = _denormalize(ids, isArray(ids) || List.isList(ids) ? [schema] : schema, entities);
  const filteredResult: DenormalizeFilterResult<Model, Ids> = isArray(result)
    ? result.filter((m) => m !== undefined)
    : List.isList(result)
      ? result.filter((m: unknown) => m !== undefined)
      : result;
  return filteredResult;
};

export default class Owner extends Record(defaultValues) {
  name: string | undefined;
  fallback_title: string | undefined;
  pet: Dog | Cat | undefined;

  static denormalize<Ids extends IdsBase>(
    id: Ids,
    entities: any
  ) {
    return denormalize<Owner, Ids>(id, entities);
  }

  // created by 'x-attribute-as'
  get title() {
    return this.get('title', this.fallback_title);
  }
}
",
  "path": "tmp/base/owner.ts",
}
`;

exports[`schema generator spec from one of check TS 5`] = `
{
  "output": "/* eslint-disable comma-dangle */
/**
 * generated from API definition file
 */

import _Cat from './base/cat';
export * from './base/cat';

export default class Cat extends _Cat {
  /**
   * write custom methods here
   */
}
",
  "path": "tmp/cat.ts",
}
`;

exports[`schema generator spec from one of check TS 6`] = `
{
  "output": "/* eslint-disable comma-dangle */
/**
 * generated from API definition file
 */

import _Dog from './base/dog';
export * from './base/dog';

export default class Dog extends _Dog {
  /**
   * write custom methods here
   */
}
",
  "path": "tmp/dog.ts",
}
`;

exports[`schema generator spec from one of check TS 7`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import Owner from './owner';
import Dog from './dog';
import Cat from './cat';

export {
  Owner,
  Dog,
  Cat,
};
",
  "path": "tmp/index.ts",
}
`;

exports[`schema generator spec from one of check TS 8`] = `
{
  "output": "/* eslint-disable comma-dangle */
/**
 * generated from API definition file
 */

import _Owner from './base/owner';
export * from './base/owner';

export default class Owner extends _Owner {
  /**
   * write custom methods here
   */
}
",
  "path": "tmp/owner.ts",
}
`;

exports[`schema generator spec from one of check TS 9`] = `
{
  "output": "/* eslint-disable quotes,comma-dangle */
/**
 * generated from API definition file
 */

export default {
  "openapi": "3.0.0",
  "tags": [
    {
      "name": "default"
    }
  ],
  "paths": {
    "/owner/{name}": {
      "get": {
        "tags": [
          "owner"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OwnerResponse"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "OwnerResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Owner"
            }
          }
        }
      }
    },
    "schemas": {
      "Owner": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "fallback_title": {
            "type": "string"
          },
          "pet": {
            "$ref": "#/components/schemas/Pet"
          }
        }
      },
      "Pet": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Dog"
          },
          {
            "$ref": "#/components/schemas/Cat"
          }
        ],
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "dog": "#/components/schemas/Dog",
            "cat": "#/components/schemas/Cat"
          }
        }
      },
      "Dog": {
        "type": "object",
        "required": [
          "id",
          "kind"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "kind": {
            "type": "string",
            "enum": [
              "dog"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Cat": {
        "type": "object",
        "required": [
          "id",
          "kind"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "kind": {
            "type": "string",
            "enum": [
              "cat"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      }
    }
  }
};
",
  "path": "tmp/sample_api.ts",
}
`;

exports[`schema generator spec from one of check TS 10`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import { schema as OwnerSchema } from './../owner';



const schemas = {
  get_owner__name_: {
    200: OwnerSchema
  }
} as const;

export default schemas;
",
  "path": "tmp/schemas/sample_schema.ts",
}
`;

exports[`schema generator spec from one of other spec file  check 1`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import isFunction from 'lodash/isFunction';
import { createAction } from 'redux-actions';
import schemas from '../schemas/sample_schema';

export const GET_PETS__ID_ = 'GET_PETS__ID_';

export function createOpenApiAction(
  id,
  payloadCreator = (params) => params,
  metaCreator
) {
  const meta = { openApi: true, id: id.toLowerCase(), schema: schemas[id.toLowerCase()] };
  const _metaCreator =
    isFunction(metaCreator)
      ? (...args) => Object.assign(metaCreator(...args), meta)
      : () => meta;
  return createAction(id, payloadCreator, _metaCreator);
}
",
  "path": "tmp/action_types/sample.js",
}
`;

exports[`schema generator spec from one of other spec file  check 2`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import { Record, List } from 'immutable';
import { schema as _schema, denormalize as _denormalize } from 'normalizr';
import isArray from 'lodash/isArray';

export const KIND_CAT = 'cat';

const defaultValues = {
  id: undefined,
  kind: undefined,
  name: undefined,
};

export const schema = new _schema.Entity('Cat', {}, { idAttribute: 'id' });

/**
 * @params ids : Cat's id[s]
 * @params entities : all entities that need to denormalize ids
 */
const denormalize = (
  ids,
  entities
) => {
  const result = _denormalize(ids, isArray(ids) || List.isList(ids) ? [schema] : schema, entities);
  const filteredResult = isArray(result)
    ? result.filter((m) => m !== undefined)
    : List.isList(result)
      ? result.filter((m) => m !== undefined)
      : result;
  return filteredResult;
};

export default class Cat extends Record(defaultValues) {
  static denormalize(
    id,
    entities
  ) {
    return denormalize(id, entities);
  }
}
",
  "path": "tmp/base/cat.js",
}
`;

exports[`schema generator spec from one of other spec file  check 3`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import { Record, List } from 'immutable';
import { schema as _schema, denormalize as _denormalize } from 'normalizr';
import isArray from 'lodash/isArray';

export const KIND_DOG = 'dog';

const defaultValues = {
  id: undefined,
  kind: undefined,
  name: undefined,
};

export const schema = new _schema.Entity('Dog', {}, { idAttribute: 'id' });

/**
 * @params ids : Dog's id[s]
 * @params entities : all entities that need to denormalize ids
 */
const denormalize = (
  ids,
  entities
) => {
  const result = _denormalize(ids, isArray(ids) || List.isList(ids) ? [schema] : schema, entities);
  const filteredResult = isArray(result)
    ? result.filter((m) => m !== undefined)
    : List.isList(result)
      ? result.filter((m) => m !== undefined)
      : result;
  return filteredResult;
};

export default class Dog extends Record(defaultValues) {
  static denormalize(
    id,
    entities
  ) {
    return denormalize(id, entities);
  }
}
",
  "path": "tmp/base/dog.js",
}
`;

exports[`schema generator spec from one of other spec file  check 4`] = `
{
  "output": "/* eslint-disable comma-dangle */
/**
 * generated from API definition file
 */

import _Cat from './base/cat';
export * from './base/cat';

export default class Cat extends _Cat {
  /**
   * write custom methods here
   */
}
",
  "path": "tmp/cat.js",
}
`;

exports[`schema generator spec from one of other spec file  check 5`] = `
{
  "output": "/* eslint-disable comma-dangle */
/**
 * generated from API definition file
 */

import _Dog from './base/dog';
export * from './base/dog';

export default class Dog extends _Dog {
  /**
   * write custom methods here
   */
}
",
  "path": "tmp/dog.js",
}
`;

exports[`schema generator spec from one of other spec file  check 6`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import Dog from './dog';
import Cat from './cat';

export {
  Dog,
  Cat,
};
",
  "path": "tmp/index.js",
}
`;

exports[`schema generator spec from one of other spec file  check 7`] = `
{
  "output": "/* eslint-disable quotes,comma-dangle */
/**
 * generated from API definition file
 */

export default {
  "openapi": "3.0.0",
  "tags": [
    {
      "name": "default"
    }
  ],
  "paths": {
    "/pets/{id}": {
      "get": {
        "tags": [
          "pet"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PetResponse"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "PetResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        }
      }
    },
    "schemas": {
      "Pet": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Dog"
          },
          {
            "$ref": "#/components/schemas/Cat"
          }
        ],
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "dog": "#/components/schemas/Dog",
            "cat": "#/components/schemas/Cat"
          }
        }
      },
      "Dog": {
        "type": "object",
        "required": [
          "id",
          "kind"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "kind": {
            "type": "string",
            "enum": [
              "dog"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Cat": {
        "type": "object",
        "required": [
          "id",
          "kind"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "kind": {
            "type": "string",
            "enum": [
              "cat"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      }
    }
  }
};
",
  "path": "tmp/sample_api.js",
}
`;

exports[`schema generator spec from one of other spec file  check 8`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import { schema as DogSchema } from './../dog';
import { schema as CatSchema } from './../cat';
import { schema as _schema } from 'normalizr';

const oneOfSchema1 = new _schema.Union({
  dog: DogSchema,
  cat: CatSchema
}, 'kind');

const schemas = {
  get_pets__id_: {
    200: oneOfSchema1
  }
};

export default schemas;
",
  "path": "tmp/schemas/sample_schema.js",
}
`;

exports[`schema generator spec from one of other spec file  check TS 1`] = `
{
  "output": "// @ts-nocheck
/* eslint-disable */
/**
 * generated from API definition file
 */

import isFunction from 'lodash/isFunction';
import { createAction, ActionFunctionAny, ActionMeta } from 'redux-actions';
import schemas from '../schemas/sample_schema';

import type { Schema } from 'normalizr';

export const GET_PETS__ID_ = 'GET_PETS__ID_';

export type ActionType =
  | 'GET_PETS__ID_';

interface Meta {
  openApi: boolean,
  id: string,
  schema: Schema,
}

export function createOpenApiAction(
  id: ActionType,
  payloadCreator?: ActionFunctionAny<any> = (params) => params,
  metaCreator?: ActionFunctionAny<Meta>
): ActionFunctionAny<ActionMeta<any, Meta>> {
  const meta = { openApi: true, id: id.toLowerCase(), schema: schemas[id.toLowerCase()] };
  const _metaCreator =
    isFunction(metaCreator)
      ? (...args: Array<any>) => Object.assign(metaCreator(...args), meta)
      : () => meta;
  return createAction(id, payloadCreator, _metaCreator);
}
",
  "path": "tmp/action_types/sample.ts",
}
`;

exports[`schema generator spec from one of other spec file  check TS 2`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import { Record, List } from 'immutable';
import { schema as _schema, denormalize as _denormalize } from 'normalizr';
import isArray from 'lodash/isArray';

export const KIND_CAT = 'cat';

export type KindCat = 'cat';

export interface CatProps {
  id: number | undefined;
  kind: KindCat | undefined;
  name: string | undefined;
};

const defaultValues: CatProps = {
  id: undefined,
  kind: undefined,
  name: undefined,
};

export const schema = new _schema.Entity('Cat', {}, { idAttribute: 'id' });

type IdsBase = number | string | number[] | string[] | List<number> | List<string>;

type DenormalizeFilterResult<Model, Ids extends IdsBase> = Ids extends unknown[]
  ? Model[]
  : Ids extends List<unknown>
    ? List<Model>
    : Model | undefined;

/**
 * @params ids : Cat's id[s]
 * @params entities : all entities that need to denormalize ids
 */
const denormalize = <Model, Ids extends IdsBase>(
  ids: Ids,
  entities: any
) => {
  const result = _denormalize(ids, isArray(ids) || List.isList(ids) ? [schema] : schema, entities);
  const filteredResult: DenormalizeFilterResult<Model, Ids> = isArray(result)
    ? result.filter((m) => m !== undefined)
    : List.isList(result)
      ? result.filter((m: unknown) => m !== undefined)
      : result;
  return filteredResult;
};

export default class Cat extends Record(defaultValues) {
  id: number | undefined;
  kind: KindCat | undefined;
  name: string | undefined;

  static denormalize<Ids extends IdsBase>(
    id: Ids,
    entities: any
  ) {
    return denormalize<Cat, Ids>(id, entities);
  }
}
",
  "path": "tmp/base/cat.ts",
}
`;

exports[`schema generator spec from one of other spec file  check TS 3`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import { Record, List } from 'immutable';
import { schema as _schema, denormalize as _denormalize } from 'normalizr';
import isArray from 'lodash/isArray';

export const KIND_DOG = 'dog';

export type KindDog = 'dog';

export interface DogProps {
  id: number | undefined;
  kind: KindDog | undefined;
  name: string | undefined;
};

const defaultValues: DogProps = {
  id: undefined,
  kind: undefined,
  name: undefined,
};

export const schema = new _schema.Entity('Dog', {}, { idAttribute: 'id' });

type IdsBase = number | string | number[] | string[] | List<number> | List<string>;

type DenormalizeFilterResult<Model, Ids extends IdsBase> = Ids extends unknown[]
  ? Model[]
  : Ids extends List<unknown>
    ? List<Model>
    : Model | undefined;

/**
 * @params ids : Dog's id[s]
 * @params entities : all entities that need to denormalize ids
 */
const denormalize = <Model, Ids extends IdsBase>(
  ids: Ids,
  entities: any
) => {
  const result = _denormalize(ids, isArray(ids) || List.isList(ids) ? [schema] : schema, entities);
  const filteredResult: DenormalizeFilterResult<Model, Ids> = isArray(result)
    ? result.filter((m) => m !== undefined)
    : List.isList(result)
      ? result.filter((m: unknown) => m !== undefined)
      : result;
  return filteredResult;
};

export default class Dog extends Record(defaultValues) {
  id: number | undefined;
  kind: KindDog | undefined;
  name: string | undefined;

  static denormalize<Ids extends IdsBase>(
    id: Ids,
    entities: any
  ) {
    return denormalize<Dog, Ids>(id, entities);
  }
}
",
  "path": "tmp/base/dog.ts",
}
`;

exports[`schema generator spec from one of other spec file  check TS 4`] = `
{
  "output": "/* eslint-disable comma-dangle */
/**
 * generated from API definition file
 */

import _Cat from './base/cat';
export * from './base/cat';

export default class Cat extends _Cat {
  /**
   * write custom methods here
   */
}
",
  "path": "tmp/cat.ts",
}
`;

exports[`schema generator spec from one of other spec file  check TS 5`] = `
{
  "output": "/* eslint-disable comma-dangle */
/**
 * generated from API definition file
 */

import _Dog from './base/dog';
export * from './base/dog';

export default class Dog extends _Dog {
  /**
   * write custom methods here
   */
}
",
  "path": "tmp/dog.ts",
}
`;

exports[`schema generator spec from one of other spec file  check TS 6`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import Dog from './dog';
import Cat from './cat';

export {
  Dog,
  Cat,
};
",
  "path": "tmp/index.ts",
}
`;

exports[`schema generator spec from one of other spec file  check TS 7`] = `
{
  "output": "/* eslint-disable quotes,comma-dangle */
/**
 * generated from API definition file
 */

export default {
  "openapi": "3.0.0",
  "tags": [
    {
      "name": "default"
    }
  ],
  "paths": {
    "/pets/{id}": {
      "get": {
        "tags": [
          "pet"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PetResponse"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "PetResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        }
      }
    },
    "schemas": {
      "Pet": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Dog"
          },
          {
            "$ref": "#/components/schemas/Cat"
          }
        ],
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "dog": "#/components/schemas/Dog",
            "cat": "#/components/schemas/Cat"
          }
        }
      },
      "Dog": {
        "type": "object",
        "required": [
          "id",
          "kind"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "kind": {
            "type": "string",
            "enum": [
              "dog"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Cat": {
        "type": "object",
        "required": [
          "id",
          "kind"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "kind": {
            "type": "string",
            "enum": [
              "cat"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      }
    }
  }
};
",
  "path": "tmp/sample_api.ts",
}
`;

exports[`schema generator spec from one of other spec file  check TS 8`] = `
{
  "output": "/* eslint-disable */
/**
 * generated from API definition file
 */

import { schema as DogSchema } from './../dog';
import { schema as CatSchema } from './../cat';
import { schema as _schema } from 'normalizr';

const oneOfSchema1 = new _schema.Union({
  dog: DogSchema,
  cat: CatSchema
}, 'kind');

const schemas = {
  get_pets__id_: {
    200: oneOfSchema1
  }
} as const;

export default schemas;
",
  "path": "tmp/schemas/sample_schema.ts",
}
`;
